package com.tripchung.app.ui

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Notifications
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import com.tripchung.app.model.sampleSpots

@Composable
fun HomeScreen(
    onPlanClick: () -> Unit
) {
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        item { TopLogoRow() }
        item { RegionDateCard(region = "Ï∂©Ï≤≠ÎèÑ", date = "10Ïõî 5Ïùº(ÌÜ†) ~ 10Ïõî 6Ïùº(Ïùº)") }
        item { PlanCtaCard(onClick = onPlanClick) }
        item { SectionTitle("Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïó¨ÌñâÏßÄ") }
        item { RecommendRow() }
        // ÌïÑÏöîÌïòÎ©¥ Ï∂îÍ∞Ä ÏÑπÏÖòÏùÑ Í≥ÑÏÜç item { ... } ÌòïÌÉúÎ°ú Î∂ôÏù¥Î©¥ Îê©ÎãàÎã§.
    }
}

@Composable
private fun TopLogoRow() {
    Row(
        Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            "Ìä∏Î¶ΩÏ∂©",
            style = MaterialTheme.typography.headlineSmall,
            color = MaterialTheme.colorScheme.primary,
            fontWeight = FontWeight.ExtraBold
        )
        Icon(Icons.Filled.Notifications, contentDescription = null)
    }
}

@Composable
private fun RegionDateCard(region: String, date: String) {
    ElevatedCard {
        Row(
            Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Column {
                Text("ÌòÑÏû¨ ÏúÑÏπò", color = MaterialTheme.colorScheme.onSurfaceVariant)
                Text(region, fontWeight = FontWeight.SemiBold)
            }
            Column {
                Text("ÎÇ†Ïßú", color = MaterialTheme.colorScheme.onSurfaceVariant)
                Text(date, fontWeight = FontWeight.SemiBold)
            }
        }
    }
}

@Composable
private fun PlanCtaCard(onClick: () -> Unit) {
    ElevatedCard(
        colors = CardDefaults.elevatedCardColors(
            containerColor = MaterialTheme.colorScheme.primary
        )
    ) {
        Column(Modifier.fillMaxWidth().padding(20.dp)) {
            Text(
                "AIÏôÄ Ìï®Íªò ÏùºÏ†ï ÎßåÎì§Í∏∞",
                color = MaterialTheme.colorScheme.onPrimary,
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            Text(
                "ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú ÏôÑÏÑ±ÌïòÎäî ÎÇòÎßåÏùò Ïó¨Ìñâ",
                color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.9f),
            )
            Spacer(Modifier.height(12.dp))
            Button(
                onClick = onClick,
                colors = ButtonDefaults.buttonColors(
                    containerColor = MaterialTheme.colorScheme.onPrimary,
                    contentColor = MaterialTheme.colorScheme.primary
                )
            ) {
                Text("ÏùºÏ†ï ÎßåÎì§Í∏∞ ÏãúÏûë")
            }
        }
    }
}

@Composable
private fun SectionTitle(title: String) {
    Text(
        title,
        style = MaterialTheme.typography.titleMedium,
        fontWeight = FontWeight.Bold
    )
}

@Composable
private fun RecommendRow() {
    LazyRow(horizontalArrangement = Arrangement.spacedBy(12.dp)) {
        items(sampleSpots) { s ->
            ElevatedCard(Modifier.width(240.dp)) {
                AsyncImage(
                    model = s.imageUrl,
                    contentDescription = null,
                    modifier = Modifier
                        .height(140.dp)
                        .fillMaxWidth()
                )
                Column(Modifier.padding(12.dp)) {
                    Text(s.name, fontWeight = FontWeight.SemiBold)
                    Text("üöó ${s.minutes}Î∂Ñ", style = MaterialTheme.typography.bodySmall)
                    Spacer(Modifier.height(8.dp))
                    OutlinedButton(onClick = { /* TODO: ÏùºÏ†ïÏóê Ï∂îÍ∞Ä */ }) {
                        Text("+ ÏùºÏ†ïÏóê Ï∂îÍ∞Ä")
                    }
                }
            }
        }
    }
}
